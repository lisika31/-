from aiogram import Bot, Dispatcher, types, executor, filters
import api_token
import datetime
import mysql.connector
import datetime
import pytz
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from moviepy.video.io.VideoFileClip import VideoFileClip
from dateutil import parser

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
bot = Bot(api_token.TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π
dp = Dispatcher(bot)

# ----------------------------------------–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ -----------------------------------------------------
recipe_name = ''
recipe_time = ''
recipe_ingredients = ''
recipe_instructions = ''
current_page = 0
total_recipes = 0
last_recipe_id = 0
result = []
message = ''
random_recipe_data = []
cursor = None
user_id = ''
username = ''
# --------------------------------------------------------------------------------------------------------------------

# ---------------------------------------–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î-----------------------------------------------
db_config = {
    'user': 'lisika31',
    'password': '123321',
    'host': 'localhost',
    'database': 'Cookbook',
    'raise_on_warnings': True
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
conn = mysql.connector.connect(**db_config)
cursor = conn.cursor()
# --------------------------------------------------------------------------------------------------------------------

# -------------------------------–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ command_name –∏–∑ —Ç–∞–±–ª–∏—Ü—ã---------------------------------------------------
query = "SELECT command_name FROM recipes"
conn.ping(reconnect=True)
cursor.execute(query)
result = cursor.fetchall()

st_command = []
for row in result:
    st_command.append(row[0])
# --------------------------------------------------------------------------------------------------------------------

# -------------------------------–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä---------------------------------------------------
kb = [
    [KeyboardButton(text='–†–µ—Ü–µ–ø—Ç—ã'), KeyboardButton(text='–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è')],
    [KeyboardButton(text='–ü–æ–∏—Å–∫'), KeyboardButton(text='–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç'), KeyboardButton(text='–ü–æ–º–æ—â—å')]
]

kb2 = [
    [KeyboardButton(text='–í—ã–ø–µ—á–∫–∞'), KeyboardButton(text='–ë–ª—é–¥–∞ —Å –º—è—Å–æ–º'), KeyboardButton(text='–ó–∞–∫—É—Å–∫–∏')],
    [KeyboardButton(text='–°—É–ø—ã'), KeyboardButton(text='–°–∞–ª–∞—Ç—ã'), KeyboardButton(text='–û–≤–æ—â–Ω—ã–µ –±–ª—é–¥–∞')],
    [KeyboardButton(text='–ë–ª—é–¥–∞ –∏–∑ —Ä—ã–±—ã'), KeyboardButton(text='–ì–∞—Ä–Ω–∏—Ä—ã')],
    [KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
]

kb_search = [
    [InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É'), InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é')],
    [InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å')]
]

main_menu_button = KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
# --------------------------------------------------------------------------------------------------------------------

# -------------------------–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ----------------------------------------------
async def write_user_info(user_id, username):
    ekt_tz = pytz.timezone('Asia/Yekaterinburg')
    current_date = datetime.datetime.now(ekt_tz).strftime('%Y-%m-%d %H:%M:%S')
    try:
        cursor.execute("SELECT * FROM users WHERE ID_user = %s", (user_id,))
        result = cursor.fetchone()
        if result:
            conn.ping(reconnect=True)
            cursor.execute("UPDATE users SET data_last = %s WHERE ID_user = %s", (current_date, user_id))
            conn.commit()
        else:
            conn.ping(reconnect=True)
            cursor.execute("INSERT INTO users (id_user, name_user, data_st, data_last) VALUES (%s, %s, %s, %s)",
                           (user_id, username, current_date, current_date))
            conn.commit()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", e)
# --------------------------------------------------------------------------------------------------------------------


# ---------------------------------------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è id –∏ –Ω–∏–∫–∞-------------------------------------------
async def get_user_info(message):
    global user_id, username
    user_id = message.from_user.id
    username = message.from_user.username
    if message.from_user.username is None:
        username = "–Ω–∏–∫_–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
# --------------------------------------------------------------------------------------------------------------------

# ------------------------------------------------ –ö–æ–º–∞–Ω–¥–∞ /statistics------------------------------------------------
@dp.message_handler(commands=['statistics'])
async def statistics_command(message: types.Message):
    chat_id = message.chat.id
    admin_chat_id = 886254616  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    i = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞

    if chat_id == admin_chat_id:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn.ping(reconnect=True)
        cursor.execute("SELECT name_user, data_st, data_last FROM users")
        rows = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        statistics_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for row in rows:
            name_user, data_st, data_last = row
            i += 1  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yy
            data_st_datetime = parser.parse(data_st)
            data_last_datetime = parser.parse(data_last)
            data_st_formatted = data_st_datetime.strftime("%d.%m.%y %H:%M")
            data_last_formatted = data_last_datetime.strftime("%d.%m.%y %H:%M")

            statistics_text += f"{i}. @{name_user}, {data_st_formatted} - {data_last_formatted}\n"

        await bot.send_message(message.chat.id, statistics_text)
    else:
        await bot.send_message(message.chat.id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
# --------------------------------------------------------------------------------------------------------------------

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO_NOTE, types.ContentType.VENUE, types.ContentType.LOCATION])
async def handle_unsupported_content(message):
    if message.content_type == types.ContentType.PHOTO:
        content_type_name = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    elif message.content_type == types.ContentType.DOCUMENT:
        content_type_name = "—Ñ–∞–π–ª—ã"
    elif message.content_type == types.ContentType.VIDEO_NOTE:
        content_type_name = "–≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è"
    elif message.content_type == types.ContentType.VENUE:
        content_type_name = "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
    elif message.content_type == types.ContentType.LOCATION:
        content_type_name = "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
    await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {content_type_name}üòî. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ /help –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

@dp.message_handler(content_types=[types.ContentType.AUDIO, types.ContentType.STICKER, types.ContentType.VOICE, types.ContentType.CONTACT, types.ContentType.POLL])
async def handle_unsupported_content(message):
    if message.content_type == types.ContentType.AUDIO:
        content_type_name = "–∞—É–¥–∏–æ"
    elif message.content_type == types.ContentType.STICKER:
        content_type_name = "—Å—Ç–∏–∫–µ—Ä—ã"
    elif message.content_type == types.ContentType.VOICE:
        content_type_name = "–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    elif message.content_type == types.ContentType.CONTACT:
        content_type_name = "–∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    elif message.content_type == types.ContentType.POLL:
        content_type_name = "–æ–ø—Ä–æ—Å—ã"
    await message.reply(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {content_type_name}üòî. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ /help –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")

# -------------------------------------------------- –ö–æ–º–∞–Ω–¥–∞ /start --------------------------------------------------
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    global cursor, username, user_id
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    user_id = message.from_user.id
    username = message.from_user.username
    if message.from_user.username is None:
        username = "–Ω–∏–∫_–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    await write_user_info(user_id, username)
    await bot.send_message(message.chat.id,
                           "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–º –º–∏—Ä–µ. –í —Å–µ–±–µ —è —Å–æ–±—Ä–∞–ª –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–π "
                           "–Æ–ª–∏–∏ –ö—É–∫—Å–∞‚ù§Ô∏è", reply_markup=keyboard)
# --------------------------------------------------------------------------------------------------------------------

# -------------------------------------------------- –ö–æ–º–∞–Ω–¥–∞ /help ---------------------------------------------------
@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    global cursor
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    helps = f"–£ –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?\n–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @lisika31. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ " \
            f"–∫–æ–º–∞–Ω–¥—ã: \n/start ‚Äì –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ \n/help ‚Äì –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"

    await get_user_info(message)
    await write_user_info(user_id, username)
    await bot.send_message(message.chat.id, helps, reply_markup=keyboard)
# --------------------------------------------------------------------------------------------------------------------

# -------------------------------------------------- –ö–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å" ---------------------------------------------------
@dp.message_handler(lambda message: message.text == '–ü–æ–º–æ—â—å')
async def get_help(message: types.Message):
    global cursor
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    helps = f"–£ –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏?\n–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @lisika31. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ " \
            f"–∫–æ–º–∞–Ω–¥—ã: \n/start ‚Äì –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ \n/help ‚Äì –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"

    await get_user_info(message)
    await write_user_info(user_id, username)
    await bot.send_message(message.chat.id, helps, reply_markup=keyboard)
# --------------------------------------------------------------------------------------------------------------------

# -------------------------------------------------- –ö–Ω–æ–ø–∫–∞ "–†–µ—Ü–µ–ø—Ç—ã" ------------------------------------------------
@dp.message_handler(lambda message: message.text == '–†–µ—Ü–µ–ø—Ç—ã')
async def get_recipes(message: types.Message):
    global cursor, keyboard, current_page
    current_page = 0
    conn.ping(reconnect=True)
    cursor = conn.cursor()
    keyboard = InlineKeyboardMarkup(row_width=2)
    prev_button = InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data='prev_page')
    next_button = InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è', callback_data='next_page')
    keyboard.add(prev_button, next_button)
    await get_user_info(message)
    await write_user_info(user_id, username)
    await bot.send_message(message.chat.id, "–†–µ—Ü–µ–ø—Ç—ã:")
    cursor.execute('SELECT COUNT(*) FROM recipes')
    total_recipes = cursor.fetchone()[0]
    query = f'SELECT * FROM recipes LIMIT 5 OFFSET {current_page * 5}'
    cursor.execute(query)
    result = cursor.fetchall()
    response = f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}): \n\n"
    for row in result:
        response += f"‚ú®{row[1]}‚ú®\n"
        response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {row[8]}\n"
        response += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /detelis_{row[0]}\n\n"
    await bot.send_message(message.chat.id, response, reply_markup=keyboard)
# -------------------------------------------------------------------------------------------------------------------

# ------------------------------------------- –ö–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è" -------------------------------------
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['prev_page', 'next_page'])
async def handle_pagination(callback_query: types.CallbackQuery):
    global current_page
    if callback_query.data == 'next_page':
        current_page += 1
    elif callback_query.data == 'prev_page':
        current_page -= 1
    if current_page < 0:
        current_page = 0
    query = f'SELECT * FROM recipes LIMIT 5 OFFSET {current_page * 5}'
    conn.ping(reconnect=True)
    cursor.execute(query)
    result = cursor.fetchall()
    if not result:
        await bot.send_message(callback_query.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. "
                                                               "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")
        return
    response = f"(–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}): \n\n"
    for row in result:
        response += f"‚ú®{row[1]}‚ú®\n"
        response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {row[8]}\n"
        response += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /detelis_{row[0]}\n\n"
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    await bot.send_message(chat_id=callback_query.message.chat.id, text=response, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)
# -------------------------------------------------------------------------------------------------------------------

# ------------------------------------------–ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"----------------------------------------------------
@dp.message_handler(lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def main_menu(message: types.Message):
    global keyboard
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True,
                                   one_time_keyboard=True)

    await get_user_info(message)
    await write_user_info(user_id, username)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=keyboard)
# -------------------------------------------------------------------------------------------------------------------

# ------------------------------------------–ö–Ω–æ–ø–∫–∞ "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è"-------------------------------------------------------
@dp.message_handler(lambda message: message.text == '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è')
async def get_recipe(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb2)
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=keyboard)

@dp.message_handler(
    lambda message: message.text in ['–í—ã–ø–µ—á–∫–∞', '–ë–ª—é–¥–∞ —Å –º—è—Å–æ–º', '–ó–∞–∫—É—Å–∫–∏', '–°—É–ø—ã', '–°–∞–ª–∞—Ç—ã', '–û–≤–æ—â–Ω—ã–µ –±–ª—é–¥–∞',
                                     '–ë–ª—é–¥–∞ –∏–∑ —Ä—ã–±—ã', '–ì–∞—Ä–Ω–∏—Ä—ã'])
async def get_recipes(message: types.Message):
    filter = message.text
    conn.ping(reconnect=True)
    query = f"SELECT * FROM recipes WHERE View = '{filter}'"
    cursor.execute(query)
    result = cursor.fetchall()
    if not result:
        await bot.send_message(message.chat.id, "–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É")
        return
    response = ""
    for row in result:
        response += f"‚ú®{row[1]}‚ú®\n"
        response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {row[8]}\n"
        response += f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /detelis_{row[0]}\n\n"

    await bot.send_message(message.chat.id, response)
    await get_user_info(message)
    await write_user_info(user_id, username)
# -------------------------------------------------------------------------------------------------------------------

# ------------------------------------------–ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å"-------------------------------------------------------
@dp.message_handler(lambda message: message.text == '–û—Ç–º–µ–Ω–∏—Ç—å')
async def main_menu(message: types.Message):
    global keyboard
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=keyboard)
# -------------------------------------------------------------------------------------------------------------------

# ---------------------------------------–ö–Ω–æ–ø–∫–∞ "–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"---------------------------------------------------
@dp.message_handler(filters.Text(equals='–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç'))
async def random_recipe(message: types.Message):
    global cursor, random_recipe_data
    cursor = conn.cursor()
    conn.ping(reconnect=True)
    cursor.execute('SELECT * FROM recipes ORDER BY RAND() LIMIT 1')
    result = cursor.fetchone()
    if result:
        recipe_id = result[0]
        recipe_name = result[1]
        recipe_ingredients = result[2]
        recipe_instructions = result[3]
        recipe_time = result[4]
        recipe_view = result[5]
        recipe_energy = result[7]
        recipe_portions = result[8]
        random_recipe_data = [recipe_id, recipe_name, recipe_ingredients, recipe_instructions,
                              recipe_time, recipe_view, recipe_energy, recipe_portions]
        response = f"üåü –ù–∞–∑–≤–∞–Ω–∏–µ: {recipe_name} üåü\n\n"
        response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {recipe_portions}\n"
        response += f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe_time}\n\n"
        details_button = InlineKeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f'details_{recipe_id}')
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[details_button]])
        photo_path = f'Files/{recipe_name}.PNG'
        with open(photo_path, 'rb') as photo:
            await bot.send_photo(message.chat.id, photo, caption=response, reply_markup=inline_keyboard)
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
# ------------------------------------------------------------------------------------------------------------------

# ------------------------------------------------- –ö–æ–º–∞–Ω–¥–∞ /detelis_ -----------------------------------------------
@dp.message_handler(lambda message: message.text.startswith('/') and message.text[1:] in st_command)
async def recipe_details_callback(message: types.Message):
    global cursor
    command = message.text[1:]
    query1 = "SELECT Name, Ingredients, Preparation, energy_value  FROM recipes WHERE command_name = %s"
    conn.ping(reconnect=True)
    cursor.execute(query1, (command,))
    recipe_data = cursor.fetchone()
    response = ""
    if recipe_data:
        recipe_name = recipe_data[0]
        recipe_ingredients = recipe_data[1]
        recipe_instructions = recipe_data[2]
        recipe_energy = recipe_data[3]
        response += f"‚ú®" + recipe_name + f"‚ú®\n\n"
        response += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: \n" + recipe_ingredients + f"\n\n"
        response += f"–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: \n" + recipe_instructions + f"\n\n"
        response += f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (100 –≥—Ä–∞–º–º): \n" + recipe_energy + f"\n\n"
        video_path = 'Files/' + recipe_name + '.mp4'
        video_clip = VideoFileClip(video_path)
        original_width = video_clip.size[0]
        original_height = video_clip.size[1]
        video_clip.close()
        back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    with open(video_path, 'rb') as video:
        await bot.send_video(message.chat.id, video, width=original_width, height=original_height,
                             caption=response, reply_markup=keyboard)
    recipe_chat_id = message.chat.id
# -------------------------------------------------------------------------------------------------------------------

# --------------------------------------–ö–æ–º–∞–Ω–¥–∞ /details_-----------------------------------------------------------
@dp.callback_query_handler(lambda query: query.data.startswith('details_'))
async def recipe_details_callback(query: types.CallbackQuery):
    global random_recipe_data
    recipe_name = random_recipe_data[1]
    recipe_ingredients = random_recipe_data[2]
    recipe_instructions = random_recipe_data[3]
    recipe_energy = random_recipe_data[6]

    response = ""
    response += f"‚ú®" + recipe_name + f"‚ú®\n\n"
    response += f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: \n" + recipe_ingredients + f"\n\n"
    response += f"–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: \n" + recipe_instructions + f"\n\n"
    response += f"–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (100 –≥—Ä–∞–º–º): \n" + recipe_energy + f"\n\n"

    video_path = f'Files/{recipe_name}.mp4'
    video_clip = VideoFileClip(video_path)
    original_width = video_clip.size[0]
    original_height = video_clip.size[1]
    video_clip.close()

    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

    with open(video_path, 'rb') as video:
        sent_message = await bot.send_video(query.message.chat.id, video, width=original_width,
                                            height=original_height,
                                            caption=response, reply_markup=keyboard)
    recipe_chat_id = query.message.chat.id
# ------------------------------------------------------------------------------------------------------------------

# -----------------------------------------–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"-----------------------------------------------------------
@dp.callback_query_handler(lambda query: query.data == "back")
async def back_callback(query: types.CallbackQuery):

    await query.message.delete()
# ------------------------------------------------------------------------------------------------------------------

# -------------------------------------------–ö–Ω–æ–ø–∫–∞ "–ü–æ–∏—Å–∫"---------------------------------------------------------
@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫')
async def get_recipes(message: types.Message):
    keyboard = ReplyKeyboardMarkup(keyboard=kb_search, resize_keyboard=True)
    await get_user_info(message)
    await write_user_info(user_id, username)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫:", reply_markup=keyboard)


ingredient_handler_active = False
name_handler_active = False


@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É' and not ingredient_handler_active)
async def search_by_ingredient_handler(message: types.Message):
    global ingredient_handler_active
    ingredient_handler_active = True

    await get_user_info(message)
    await write_user_info(user_id, username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")


@dp.message_handler(lambda message: ingredient_handler_active, state="*")
async def handle_ingredient(message: types.Message):
    ingredient = message.text
    await search_by_ingredient(message, ingredient)


async def search_by_ingredient(message: types.Message, ingredient: str):
    global ingredient_handler_active, keyboard
    conn.ping(reconnect=True)
    cursor.execute("SELECT * FROM recipes WHERE Ingredients LIKE %s", ('%' + ingredient + '%',))
    recipes = cursor.fetchall()
    keyboard = ReplyKeyboardMarkup(keyboard=kb_search, resize_keyboard=True)
    if recipes:
        response = ""
        for row in recipes:
            response += f"‚ú®{row[1]}‚ú® \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {row[8]} \n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /detelis_{row[0]}\n\n"
        await bot.send_message(message.chat.id, response, reply_markup=keyboard)
    
        await get_user_info(message)
        await write_user_info(user_id, username)
    else:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–º '{ingredient}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    ingredient_handler_active = False


@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é' and not name_handler_active)
async def search_by_Name_handler(message: types.Message):
    global name_handler_active
    name_handler_active = True

    await get_user_info(message)
    await write_user_info(user_id, username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:")


@dp.message_handler(lambda message: name_handler_active, state="*")
async def handle_Name(message: types.Message):
    name = message.text
    await search_by_Name(message, name)


async def search_by_Name(message: types.Message, Name: str):
    global name_handler_active, keyboard
    conn.ping(reconnect=True)
    cursor.execute("SELECT * FROM recipes WHERE Name LIKE %s", ('%' + Name + '%',))
    keyboard = ReplyKeyboardMarkup(keyboard=kb_search, resize_keyboard=True)
    recipes = cursor.fetchall()
    if recipes:
        response = ""
        for row in recipes:
            response += f"‚ú®{row[1]}‚ú® \n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {row[8]} \n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /detelis_{row[0]}\n\n"
        await bot.send_message(message.chat.id, response, reply_markup=keyboard)
    
        await get_user_info(message)
        await write_user_info(user_id, username)
    else:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    name_handler_active = False

# ------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------–û—Ç–≤–µ—Ç –±–æ—Ç–∞------------------------------------------------------
@dp.message_handler()
async def handle_unknown_message(message: types.Message):

    await get_user_info(message)
    await write_user_info(user_id, username)
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—éüòî. –û–∑–Ω–∞–∫–æ–º—Ç–µ—Å—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ /help –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
# ----------------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def start_bot():
    executor.start_polling(dp, skip_updates=False)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    start_bot()
